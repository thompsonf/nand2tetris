// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int curLen, maxLen;
    field Array charArray;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      if (maxLength < 0) {
        do Sys.error(14);
      }
      let curLen = 0;
      let maxLen = maxLength;
      if (maxLen > 0) {
        let charArray = Array.new(maxLength);
      }
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      if (maxLen > 0) {
        do Memory.deAlloc(charArray);
      }
      do Memory.deAlloc(this);
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return curLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      if ((j < 0) | ~(j < curLen)) {
        do Sys.error(15);
      }
      return charArray[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      if ((j < 0) | ~(j < curLen)) {
        do Sys.error(16);
      }
      let charArray[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      if (curLen < maxLen) {
        let charArray[curLen] = c;
        let curLen = curLen + 1;
      } else {
        do Sys.error(17);
      }
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      if (curLen = 0) {
        do Sys.error(18);
      }
      let curLen = curLen - 1;
      return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
      var int cur, idx, val;
      var bool minus;

      if (curLen = 0) {
        return 0;
      }

      // minus
      if (charArray[idx] = 45) {
        let idx = 1;
        let minus = true;
      } else {
        let idx = 0;
        let minus = false;
      }

      let val = 0;
      let cur = charArray[idx];
      // digits are 48 (0) through 57 (9)
      while ((idx < curLen) & (cur > 47) & (cur < 58)) {
        let val = (val * 10) + (cur - 48);
        let idx = idx + 1;
        let cur = charArray[idx];
      }

      if (minus) {
        return -val;
      }
      return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      let curLen = 0;

      if (val < 0) {
        do appendChar(45);
      }
      do setIntHelp(Math.abs(val));
      return;
    }

    method void setIntHelp(int val) {
      var int lastDigit, trunc;
      if (val < 10) {
        do appendChar(val + 48);
        return;
      }
      let trunc = val / 10;
      do setIntHelp(trunc);
      do appendChar(48 + val - (trunc * 10));
      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
