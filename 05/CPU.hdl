// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // load A?
    Not(in=instruction[15], out=is-a);
    Or(a=is-a, b=instruction[5], out=load-a);
    // load D?
    And(a=instruction[15], b=instruction[4], out=load-d);
    // load M?
    And(a=instruction[15], b=instruction[3], out=writeM);

    DRegister(in=alu, load=load-d, out=d-reg);

    Mux16(a=alu, b=instruction, sel=is-a, out=a-reg-in);
    ARegister(in=a-reg-in, load=load-a, out=a-reg, out[0..14]=addressM);

    Mux16(a=a-reg, b=inM, sel=instruction[12], out=a-or-m);
    ALU(x=d-reg, y=a-or-m, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=alu, zr=is-zero, ng=is-negative);

    // jump instructions
    Or(a=is-zero, b=is-negative, out=is-not-positive);
    Not(in=is-not-positive, out=is-positive);
    And(a=is-negative, b=instruction[2], out=jump-negative);
    And(a=is-zero, b=instruction[1], out=jump-zero);
    And(a=is-positive, b=instruction[0], out=jump-positive);
    Or(a=jump-negative, b=jump-positive, out=jump-non-zero);
    Or(a=jump-non-zero, b=jump-zero, out=jump-any);
    And(a=jump-any, b=instruction[15], out=jump);
    Not(in=jump, out=not-jump);

    PC(in=a-reg, load=jump, inc=not-jump, reset=reset, out[0..14]=pc);
}